
#Область ПрограммныйИнтерфейс

#Область ОповещениеПользователя

// Формирует путь к заданной строке НомерСтроки и колонке ИмяРеквизита 
// табличной части ИмяТабличнойЧасти для выдачи сообщений в форме.
// Для совместного использования с процедурой СообщитьПользователю
// (для передачи в параметры Поле или ПутьКДанным). 
//
// Параметры:
//  ИмяТабличнойЧасти - Строка - имя табличной части.
//  НомерСтроки - Число - номер строки табличной части.
//  ИмяРеквизита - Строка - имя реквизита.
//
// Возвращаемое значение:
//  Строка - путь к ячейке таблицы.
//
Функция ПутьКТабличнойЧасти(
		Знач ИмяТабличнойЧасти,
		Знач НомерСтроки, 
		Знач ИмяРеквизита) Экспорт
	
	Возврат СтрШаблон("%1[%2].%3",
		ИмяТабличнойЧасти,
		Формат(НомерСтроки - 1, "ЧН=0; ЧГ=0"),
		ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область Данные

// Создает массив и помещает в него переданное значение.
//
// Параметры:
//  Значение - Произвольный - любое значение.
//
// Возвращаемое значение:
//  Массив - массив из одного элемента.
//
Функция ЗначениеВМассиве(Знач Значение) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	ВозвращаемоеЗначение.Добавить(Значение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает копию исходного массива с уникальными значениями.
//
// Параметры:
//  Массив - Массив - массив произвольных значений.
//
// Возвращаемое значение:
//  Массив - массив уникальных элементов.
//
Функция СвернутьМассив(Знач Массив) Экспорт
	Результат = Новый Массив;
	ДополнитьМассив(Результат, Массив, Истина);
	Возврат Результат;
КонецФункции

// Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник - Массив - массив, в который необходимо добавить значения.
//  МассивИсточник - Массив - массив значений для заполнения.
//  ТолькоУникальныеЗначения - Булево - если истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		
		УникальныеЗначения = Новый Соответствие;
		
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет все вхождения переданного значения из массива.
//
// Параметры:
//  Массив - Массив - массив, из которого необходимо удалить значение;
//  Значение - Произвольный - удаляемое значение из массива.
// 
Процедура УдалитьВсеВхожденияЗначенияИзМассива(Массив, Значение) Экспорт
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		Если Массив[Индекс] = Значение Тогда
			
			Массив.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу значений Таблица значениями из массива Массив.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица, которую необходимо заполнить значениями из массива;
//  Массив  - Массив - массив значений для заполнения таблицы;
//  ИмяПоля - Строка - имя поля таблицы значений, в которое необходимо загрузить значения из массива.
// 
Процедура ДополнитьТаблицуИзМассива(Таблица, Массив, ИмяПоля) Экспорт

	Для каждого Значение Из Массив Цикл
		
		Таблица.Добавить()[ИмяПоля] = Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Оформление

// Параметры:
//  Форма                        - ФормаКлиентскогоПриложения       - На которую необходимо добавить условное оформление
//  ОформляемоеПоле              - Строка, Неопределено             - Имя офомляемого элемента формы. Например, "Товары". Если не передавать, то оформляемое поле не будет добавлено
//  ИмяПараметраОформления       - Строка, ПараметрКомпоновкиДанных - Указывает что будет изменено в офомлении поля. Например, "ЦветФона" / "Текст"
//  ЗначениеПараметраОформления  - Произвольный                     - Значение оформления. Например, <Новый Цвет(222, 255, 222)>
//  ПутьКЛевомуЗначениюОтбора    - Строка, Неопределено             - Путь к полю по которому выполняется отбор условного оформления. Например, "Товары.Номенклатура" / "Контрагент". Если не передавать, то отбор не будет установлен
//  ВидСравненияОтбора           - ВидСравненияКомпоновкиДанных     - Вид сравнения. По умолчанию "ВидСравненияКомпоновкиДанных.Равно"
//  ПравоеЗначениеОтбора         - Произвольный                     - С чем сравнивать левое значение
//
// ВозвращаемоеЗначение:
//  ЭлементУсловногоОформления - Добавленный элемент оформления
Функция ДобавитьПростойЭлементУсловногоОформления(Форма, ОформляемоеПоле = Неопределено, 
	ИмяПараметраОформления = Неопределено, ЗначениеПараметраОформления = Неопределено, 
	ПутьКЛевомуЗначениюОтбора = Неопределено, ВидСравненияОтбора = Неопределено, ПравоеЗначениеОтбора = Неопределено) Экспорт
	
	//Добавляем элемент:
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	Если ЗначениеЗаполнено(ИмяПараметраОформления) Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(ИмяПараметраОформления, ЗначениеПараметраОформления);
	КонецЕсли;
	
	Если НЕ ПутьКЛевомуЗначениюОтбора = Неопределено Тогда
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКЛевомуЗначениюОтбора);
		ОтборЭлемента.ВидСравнения   = ?(ВидСравненияОтбора = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравненияОтбора);
		ОтборЭлемента.ПравоеЗначение = ПравоеЗначениеОтбора;
	КонецЕсли;
	
	Если НЕ ОформляемоеПоле = Неопределено Тогда
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	КонецЕсли;

	Возврат ЭлементУсловногоОформления;
	
КонецФункции

#КонецОбласти

#КонецОбласти
